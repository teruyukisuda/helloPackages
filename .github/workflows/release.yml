name: GitHub Packagesへのリリース

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'リリースバージョン (vプレフィックスなし、例: 1.2.3)'
        required: true
        type: string

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: mainブランチをチェックアウト
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: JDKセットアップ
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
          cache: maven
          server-id: github
          server-username: GITHUB_ACTOR
          server-password: GITHUB_TOKEN

      - name: POMバージョン更新
        run: |
          mvn versions:set -DnewVersion=${{ github.event.inputs.version }} -DgenerateBackupPoms=false
          echo "POMバージョンを ${{ github.event.inputs.version }} に更新しました"

      - name: ビルドとテスト
        run: mvn --batch-mode clean verify

      - name: 変更をコミット
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pom.xml
          git commit -m "バージョン ${{ github.event.inputs.version }} のリリース準備"
          git push

      - name: タグを作成
        run: |
          git tag -a "v${{ github.event.inputs.version }}" -m "リリース v${{ github.event.inputs.version }}"
          git push origin "v${{ github.event.inputs.version }}"

  publish:
    needs: prepare-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: リリースタグをチェックアウト
        uses: actions/checkout@v4
        with:
          ref: "v${{ github.event.inputs.version }}"
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: バージョンの整合性確認
        run: |
          TAG_VERSION="${{ github.event.inputs.version }}"
          POM_VERSION=$(grep -m 1 "<version>" pom.xml | sed 's/[<>]/|/g' | cut -d '|' -f 3)
          if [ "$TAG_VERSION" != "$POM_VERSION" ]; then
            echo "エラー: タグバージョン ($TAG_VERSION) と POM バージョン ($POM_VERSION) が一致しません"
            exit 1
          fi

      - name: JDKセットアップ
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
          cache: maven
          server-id: github
          server-username: GITHUB_ACTOR
          server-password: GITHUB_TOKEN

      - name: GitHub Packagesにパブリッシュ
        run: mvn --batch-mode deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: GitHubリリースの作成
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ github.event.inputs.version }}"
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  post-release:
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: mainブランチをチェックアウト
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: developブランチへのマージバック
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout develop
          git merge --no-ff main -m "main (${{ github.event.inputs.version }}) をdevelopにマージバック"
          
          # 次の開発バージョンに更新（オプション）
          # 例：1.2.3 -> 1.2.4-SNAPSHOT
          NEW_DEV_VERSION=$(echo ${{ github.event.inputs.version }} | awk -F. '{$NF = $NF + 1; print}' OFS=.)."-SNAPSHOT"
          mvn versions:set -DnewVersion=$NEW_DEV_VERSION -DgenerateBackupPoms=false
          git add pom.xml
          git commit -m "次の開発バージョン $NEW_DEV_VERSION の準備"
          git push origin develop
